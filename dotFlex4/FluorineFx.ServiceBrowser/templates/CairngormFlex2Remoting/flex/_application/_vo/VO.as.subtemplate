<%@ CodeTemplate Language="C#"%>
<%@ Assembly Name="FluorineFx.ServiceBrowser.dll" %>
<%@ Import Namespace="FluorineFx.Management" %>
<%@ Import Namespace="FluorineFx.Management.Data" %>
/*
 Generated by FluorineFx
 THE DOCUMENT CREATED BY FLUORINEFX IS PROVIDED "AS IS", WITHOUT WARRANTY OR CONDITIONS 
 OF ANY KIND, EITHER EXPRESS OR IMPLIED.
*/

package <%=Context["Package"]%>.vo
{
	import com.adobe.cairngorm.vo.IValueObject;
<%
	//Hell yea we need imports too.
	TypeDescriptor typeDescriptor = this.Context["TypeDescriptor"] as TypeDescriptor;
	if( typeDescriptor != null )
	{
		Hashtable imports = new Hashtable();
		foreach(PropertyDescriptor propertyDescriptor in typeDescriptor.Properties)
		{
			ActionScriptType actionScriptType = propertyDescriptor.Type.ActionScriptType;
			if( actionScriptType.Intrinsic && actionScriptType.Namespace != string.Empty )
			{
				imports[actionScriptType.ToString()] = actionScriptType;
			}
		}
		foreach(FieldDescriptor fieldDescriptor in typeDescriptor.Fields)
		{
			ActionScriptType actionScriptType = fieldDescriptor.Type.ActionScriptType;
			if( actionScriptType.Intrinsic && actionScriptType.Namespace != string.Empty )
			{
				imports[actionScriptType.ToString()] = actionScriptType;
			}
		}
		foreach(DictionaryEntry entry in imports)
		{
			string typeName = entry.Key as string;
%>	import <%=typeName%>;<%
		}
	}	
%>		
	
	[Bindable]
	[RemoteClass(alias="<%=Context["Alias"]%>")]
	public class <%=Context["Class"]%> implements IValueObject
	{
<%
	if( typeDescriptor != null )
	{
		foreach(PropertyDescriptor propertyDescriptor in typeDescriptor.Properties)
		{
			//The premise here is that all transfer objects are generated in the same namespace
			ActionScriptType actionScriptType = propertyDescriptor.Type.ActionScriptType;
%>		
			private var _<%=propertyDescriptor.CamelCase%>:<%=actionScriptType.Name%>;

			public function get <%=propertyDescriptor.Name%>():<%=actionScriptType.Name%> {
				return _<%=propertyDescriptor.CamelCase%>;
			}
			/**
			* @private
			*/
			public function set <%=propertyDescriptor.Name%>(value:<%=actionScriptType.Name%>):void {
				_<%=propertyDescriptor.CamelCase%> = value;
			}
<%
		}
	}
%>		
<%
	if( typeDescriptor != null )
	{
		foreach(FieldDescriptor fieldDescriptor in typeDescriptor.Fields)
		{
			ActionScriptType actionScriptType = fieldDescriptor.Type.ActionScriptType;
%>		
			public var <%=fieldDescriptor.Name%>:<%=actionScriptType.Name%>;
<%
		}
	}
%>		

	
	}	
}