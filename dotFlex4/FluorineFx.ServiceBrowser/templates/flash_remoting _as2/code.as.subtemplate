<%@ CodeTemplate Language="C#"%>
<%@ Assembly Name="FluorineFx.ServiceBrowser.dll" %>
<%@ Import Namespace="FluorineFx.Management" %>
<%@ Import Namespace="FluorineFx.Management.Data" %>
/*
 Generated by FluorineFx
 THE DOCUMENT CREATED BY FLUORINEFX IS PROVIDED "AS IS", WITHOUT WARRANTY OR CONDITIONS 
 OF ANY KIND, EITHER EXPRESS OR IMPLIED.
*/

import mx.remoting.Service;
import mx.rpc.RelayResponder;
import mx.rpc.FaultEvent;
import mx.rpc.ResultEvent;
import mx.remoting.PendingCall;
import mx.remoting.RecordSet;
import mx.remoting.DataGlue;
import mx.utils.Delegate;
import mx.remoting.debug.NetDebug;
import mx.data.binding.ObjectDumper;

<%
	Project project = Context["Project"] as Project;
	TypeDescriptor typeDescriptor = Context["TypeDescriptor"] as TypeDescriptor;
	if( typeDescriptor != null )
	{
	%>
	
class <%=typeDescriptor.FullName%>
{
	//Change the gateway URL as needed
	private var gatewayUrl:String = "<%=project.Uri.AbsoluteUri%>";
	private var service:Service;

	function <%=typeDescriptor.Name%>(<% if(project.RequiresAuthentication){ Echo("user, pass"); } %>)
	{
		NetDebug.initialize();
		this.service = new Service(this.gatewayUrl, null, "<%=typeDescriptor.FullName%>", null, null);
		<% if(project.RequiresAuthentication){ %>this.service.connection.setCredentials(user, pass);<% } %>
	}
	
<% 
foreach(MethodDescriptor methodDescriptor in typeDescriptor.Methods)
{
%>
	<%if(methodDescriptor.Description!=null) Echo("//" + methodDescriptor.Description);%>
	function <%=methodDescriptor.Name%>(<%for(int i = 0; i < methodDescriptor.Parameters.Length; i++){ ParameterDescriptor parameter = methodDescriptor.Parameters[i]; if(i>0) Echo(", "); Echo(parameter.Name); } %>)
	{
		var pc:PendingCall = service.<%=methodDescriptor.Name%>(<%for(int i = 0; i < methodDescriptor.Parameters.Length; i++){ ParameterDescriptor parameter = methodDescriptor.Parameters[i]; if(i>0) Echo(", "); Echo(parameter.Name); } %>);
		pc.responder = new RelayResponder(this, "handle<%=methodDescriptor.Name%>", "handleRemotingError");
	}
	
	function handle<%=methodDescriptor.Name%>(re:ResultEvent)
	{
		//Implement custom callback code
		trace(ObjectDumper.toString(re.result));
	}	
<% 
}
%>

	function handleRemotingError( fault:FaultEvent ):Void 
	{
		NetDebug.trace({level:"None", message:"Error: " + fault.fault.faultstring });
		trace(ObjectDumper.toString(fault.fault));
	}
}
	<%
	}
%>