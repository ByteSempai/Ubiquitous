<%@ CodeTemplate Language="C#"%>
<%@ Assembly Name="System.Data.dll" %>
<%@ Assembly Name="FluorineFx.ServiceBrowser.dll" %>
<%@ Import Namespace="FluorineFx.Management" %>
<%@ Import Namespace="FluorineFx.Management.Data" %>
<%@ Import Namespace="FluorineFx.Management.Data.Database" %>
<%@ Import Namespace="System.Data" %>
/*
 Generated by FluorineFx
 THE DOCUMENT CREATED BY FLUORINEFX IS PROVIDED "AS IS", WITHOUT WARRANTY OR CONDITIONS 
 OF ANY KIND, EITHER EXPRESS OR IMPLIED.
*/
 
using System;
using System.Collections;
using <%=Context["Package"]%>.VO;
<%
	Project project = this.Context["Project"] as Project;
	DataAssembler dataAssembler = this.Context["DataAssembler"] as DataAssembler;
	DataDomain dataDomain = project.GetAssemblerDataDomain(dataAssembler);
	Driver driver = DriverFactory.GetDriver(dataDomain);
	ColumnCollection columns = dataAssembler.GetColumns();
	Column identityColumn = dataAssembler.GetIdentityColumn();
%>
namespace <%=Context["Package"]%>
{
	/// <summary>
	/// Summary description for <%=Context["Class"]%>DAO.
	/// </summary>
	public class <%=Context["Class"]%>DAO
	{
		public <%=Context["Class"]%>DAO()
		{
		}
		
        private string GetConnectionString()
        {
            string connectionString = System.Configuration.ConfigurationManager.ConnectionStrings["<%=dataDomain.Name%>"].ConnectionString;
            return connectionString;
        }
		
		#region DAO Members
		
		public IList Fill(IList fillParameters)
		{
			ArrayList list = new ArrayList();
			string query = dataAssembler.Select;
			//Additionally handle fillParameters
			
			using(<%=driver.ConnectionClass%> connection = new <%=driver.ConnectionClass%>( GetConnectionString() ))
			{
				<%=driver.CommandClass%> command = new <%=driver.CommandClass%>( query, connection );
				connection.Open();
				using( <%=driver.DataReaderClass%> reader = command.ExecuteReader() )
				{			
					while( reader.Read() )
					{
						<%=Context["Class"]%>VO vo = new <%=Context["Class"]%>VO();
<%
						for(int ordinal = 0; ordinal < columns.Count; ordinal++)
						{
							Column column = columns[ordinal];
%>							
						vo.<%=column.SafeName%> = reader.<%=driver.GetDataReaderAccessor(column)%>( <%=ordinal%> );<%
						}
%>						
						list.Add( vo );
					}
				}
			}
			return list;
		}
		
		public <%=Context["Class"]%>VO Create(<%=Context["Class"]%>VO instance)
		{
			Validate( instance );
			using(<%=driver.ConnectionClass%> connection = new <%=driver.ConnectionClass%>( GetConnectionString() ))
			{
				connection.Open();
				string query = @"<%=dataAssembler.GetInsertCommandText()%>";
				<%=driver.CommandClass%> command = new <%=driver.CommandClass%>( query, connection );
<%
				for(int ordinal = 0; ordinal < columns.Count; ordinal++)
				{
					Column column = columns[ordinal];
					if( column.IsIdentity )
						continue;
					if (!column.IsBlob)
					{
						if (column.IsNullable)
						{
%>
				command.Parameters.Add(new <%=driver.GetCommand(column, column.Name, System.Data.ParameterDirection.Input, System.Data.DataRowVersion.Current, false)%>).Value = (instance.<%=column.SafeName%> == null ? DBNull.Value : (object)instance.<%=column.SafeName%>);<%
						}
						else
						{
%>
				command.Parameters.Add(new <%=driver.GetCommand(column, column.Name, System.Data.ParameterDirection.Input, System.Data.DataRowVersion.Current, false)%>).Value = instance.<%=column.SafeName%>;<%
						}
					}
				}
%>				
				command.ExecuteNonQuery();
<%				
				if( identityColumn != null )
				{
%>				
				command = new <%=driver.CommandClass%>( "<%=driver.IdentityQuery%>", connection );
				instance.<%=identityColumn.SafeName%> = (int)command.ExecuteScalar();
<%
				}
%>				
			}
			return instance;
		}
		
		public void Update(<%=Context["Class"]%>VO newVersion, <%=Context["Class"]%>VO previousVersion)
		{
			Validate( newVersion );
			using(<%=driver.ConnectionClass%> connection = new <%=driver.ConnectionClass%>( GetConnectionString() ))
			{
				connection.Open();
				<%=driver.CommandClass%> command = new <%=driver.CommandClass%>( null, connection );
				command.CommandText = @"<%=dataAssembler.GetUpdateCommandText(true)%>";
<%
				for(int ordinal = 0; ordinal < columns.Count; ordinal++)
				{
					Column column = columns[ordinal];
					if (!column.IsBlob)
					{
						if (column.IsNullable)
						{
%>
				command.Parameters.Add(new <%=driver.GetCommand(column, column.Name, System.Data.ParameterDirection.Input, System.Data.DataRowVersion.Current, false)%>).Value = (newVersion.<%=column.SafeName%> == null ? DBNull.Value : (object)newVersion.<%=column.SafeName%>);<%
						}
						else
						{
%>
				command.Parameters.Add(new <%=driver.GetCommand(column, column.Name, System.Data.ParameterDirection.Input, System.Data.DataRowVersion.Current, false)%>).Value = newVersion.<%=column.SafeName%>;<%
						}					
						if (!column.IsNullable)
						{
							string parameterName = "Original_" + column.Name;
%>
				command.Parameters.Add(new <%=driver.GetCommand(column, parameterName, System.Data.ParameterDirection.Input, System.Data.DataRowVersion.Original, false)%>).Value = previousVersion.<%=column.SafeName%>;<%
						}
						else
						{
							string parameterName1 = "Original_" + column.Name;
							string parameterName2 = "IsNull_" + column.Name;
%>				
				command.Parameters.Add(new <%=driver.GetCommand(column, parameterName1, System.Data.ParameterDirection.Input, System.Data.DataRowVersion.Original, false)%>).Value = previousVersion.<%=column.SafeName%>;
				command.Parameters.Add(new <%=driver.GetCommand(column, parameterName2, System.Data.ParameterDirection.Input, System.Data.DataRowVersion.Original, true)%>).Value = previousVersion.<%=column.SafeName%>;<%						
						}
					}
				}		
%>				
				int rowsAffected = command.ExecuteNonQuery();
				if( rowsAffected == 0 )
					throw new FluorineFx.Data.DataSyncException(previousVersion, null);
			}
		}

		public void Delete(<%=Context["Class"]%>VO instance)
		{
			using(<%=driver.ConnectionClass%> connection = new <%=driver.ConnectionClass%>( GetConnectionString() ))
			{
				connection.Open();
				<%=driver.CommandClass%> command = new <%=driver.CommandClass%>( null, connection );
				command.CommandText = @"<%=dataAssembler.GetDeleteCommandText(true)%>";
<%
				for(int ordinal = 0; ordinal < columns.Count; ordinal++)
				{
					Column column = columns[ordinal];
					if (!column.IsBlob)
					{
						if (!column.IsNullable)
						{
							string parameterName = "Original_" + column.Name;
%>
				command.Parameters.Add(new <%=driver.GetCommand(column, parameterName, System.Data.ParameterDirection.Input, System.Data.DataRowVersion.Original, false)%>).Value = instance.<%=column.SafeName%>;<%
						}
						else
						{
							string parameterName1 = "Original_" + column.Name;
							string parameterName2 = "IsNull_" + column.Name;
%>				
				command.Parameters.Add(new <%=driver.GetCommand(column, parameterName1, System.Data.ParameterDirection.Input, System.Data.DataRowVersion.Original, false)%>).Value = instance.<%=column.SafeName%>;
				command.Parameters.Add(new <%=driver.GetCommand(column, parameterName2, System.Data.ParameterDirection.Input, System.Data.DataRowVersion.Original, true)%>).Value = instance.<%=column.SafeName%>;<%						
						}
					}
				}		
%>				
				int rowsAffected = command.ExecuteNonQuery();
				if( rowsAffected == 0 )
					throw new FluorineFx.Data.DataSyncException(instance, null);
			}
		}
		
		private void Validate(<%=Context["Class"]%>VO instance)
		{
		}
		
		#endregion		
	}
}
